import { apiGet, apiPost, apiPatch, apiDelete, apiUploadPost } from '../api.client';
export const signup = (data) => apiPost('/auth/signup', data);
export const login = (data) => apiPost('/auth/login', data);
export const getMe = () => apiGet('/me');
export const updateMe = (data) => apiPatch('/me', data);
export const listPosts = (p={}) => { const q=new URLSearchParams(p).toString(); return apiGet('/posts'+(q?`?${q}`:'')); };
export const getPost = (id) => apiGet(`/posts/${id}`);
export const createPost = ({title, content, lat, lng, files}) => apiUploadPost({title, content, lat, lng, files});
export const addComment = (id, text) => apiPost(`/posts/${id}/comments`, { text });
export const likePost = (id) => apiPost(`/posts/${id}/like`, {});
export const unlikePost = (id) => apiDelete(`/posts/${id}/like`);
export const favoritePost = (id) => apiPost(`/posts/${id}/favorite`, {});
export const unfavoritePost = (id) => apiDelete(`/posts/${id}/favorite`);
// Favorites list helper (requires backend support)
export const listFavorites = () => apiGet('/posts?favorites=1');
export const createGroup = (data) => apiPost('/groups', data);
export const listGroups = () => apiGet('/groups');
export const joinGroup = (id) => apiPost(`/groups/${id}/join`, {});
export const groupMembers = (id) => apiGet(`/groups/${id}/members`);
export const createEvent = (data) => apiPost('/events', data);
export const listEvents = (p={}) => { const q=new URLSearchParams(p).toString(); return apiGet('/events'+(q?`?${q}`:'')); };
export const rsvpEvent = (id, status) => apiPost(`/events/${id}/rsvp`, { status });
export const createInvitation = (email) => apiPost('/invitations', { email });
export const acceptInvitation = (token) => apiPost('/invitations/accept', { token });
export const createChat = (participantIds, title=null) => apiPost('/chats', { participantIds, title });
export const listChats = () => apiGet('/chats');
export const sendMessage = (chatId, text) => apiPost(`/chats/${chatId}/messages`, { text });
export const listMessages = (chatId, limit=50) => apiGet(`/chats/${chatId}/messages?limit=${limit}`);
export { imageSource } from '../api.client';